1] The Skyline Problem
      #code
class Solution {
public:
    vector<vector<int>> getSkyline(vector<vector<int>>& build) {
        vector<pair<int,int>> vt;
        vector<vector<int>> ans;
        for(auto it:build)
        {
            vt.push_back({it[0],-it[2]}); //leftWall
            vt.push_back({it[1],it[2]}); //rightWall
        }
        sort(vt.begin(),vt.end());
        multiset<int> mt{0};
        int top = 0; // record the height of skyLine
        for(auto itr:vt)
        {
            if(itr.second < 0)
            {
                mt.insert(-itr.second);
            }
            else
            {
                mt.erase(mt.find(itr.second));
            }
            if(*mt.rbegin() != top) // when top height changes then 
            {
                // cout<<itr.second<<" "<<top<<" ";
                top = *mt.rbegin();
                ans.push_back({itr.first,top});
            }
        }
        return ans;
    }
};

2] Minimum Cost of a Path With Special Roads

          #CODE
  class Solution 
{
    public static class Pair
    {
        int x, y, dist;

        public Pair(int x, int y, int dist)
        {
            this.x = x;
            this.y = y;
            this.dist = dist;
        }

        @Override
        public String toString()
        {
            return "[" + x + ", " + y + ", " + dist + "]";
        }
    }

    public static int inf = (int) 1e9;

    public int minimumCost(int[] start, int[] target, int[][] specialRoads) 
    {
        final int n = specialRoads.length;
        final int[] dist = new int[n];
        final PriorityQueue<Pair> queue = new PriorityQueue<>((a, b) -> a.dist - b.dist);

        int targetDist = inf;
        Arrays.fill(dist, inf);
        queue.add(new Pair(start[0], start[1], 0));

        while(!queue.isEmpty())
        {
            final Pair curPair = queue.remove();

            if (curPair.x == target[0] && curPair.y == target[1]) return curPair.dist;

            for (int i = 0; i < n; i++)
            {
                int tempDist = Math.abs(curPair.x - specialRoads[i][0]) + Math.abs(curPair.y - specialRoads[i][1]) + specialRoads[i][4];

                if (curPair.dist + tempDist < dist[i])
                {
                    dist[i] = curPair.dist + tempDist;

                    queue.add(new Pair(specialRoads[i][2], specialRoads[i][3], dist[i]));
                }
            }

            int tempDist = Math.abs(curPair.x - target[0]) + Math.abs(curPair.y - target[1]);

            if (curPair.dist + tempDist < targetDist)
            {
                targetDist = curPair.dist + tempDist;

                queue.add(new Pair(target[0], target[1], targetDist));
            }
        }

        return -1;
    }
}

3] Longest Word in Dictionary through Deleting
   #CODE

class Solution {
    public String findLongestWord(String s, List<String> dictionary) {
        String res="";
        for(String str:dictionary){
            int index=0;
            boolean flag=true;
            for(char ch:str.toCharArray()){
                while(index<s.length() && s.charAt(index)!=ch) index++;
                if(index==s.length()){
                    flag=false;
                    break;
                }
                index++;
            }
            if(flag){
                if(str.length() > res.length() ||  (str.length() == res.length() && res.compareTo(str) > 0)){
                    res=str;
                }
            }
        }
        return res;
    }
}
