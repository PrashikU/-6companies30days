1] Wiggle Sort II
    #code
class Solution {
    public void wiggleSort(int[] nums) {
        //0 <= nums[i] <= 5000
        //min = 0, max = 5000
        //fill max available value on even positions then on odd positions
        
        int[] bucket = new int[5001];
        
        for(int i: nums)
            bucket[i]++;
        
        int max = 5000;
        boolean firstPass = true;
        for(int i = 1 ; i < nums.length; i+=2){
            
            
            while(bucket[max] == 0)
                max--;
            
            nums[i] = max;
            bucket[max]--;
            
            
            if(firstPass && i+2 >= nums.length){
                i = -2;
                firstPass = false;
            }
        }
        
    }
}

2] Shopping Offers

   #code

class Solution {
    int min = Integer.MAX_VALUE;
    
    public int shoppingOffers(List<Integer> price, List<List<Integer>> special, List<Integer> needs) {
        solve(0, price, special, needs, 0);
        return min;
    }
    
    public void solve(int idx, List<Integer> price, List<List<Integer>> special, List<Integer> needs, int bought) {
        if (isFulfilled(needs)) {
            min = Math.min(min, bought);
            return;
        }
        if (idx >= special.size()) {
            //if we didnt use any special offers the we buy them individually 
            int total = bought;
            for (int i = 0; i < needs.size(); i++) {
                total += needs.get(i) * price.get(i);
            }
            min = Math.min(min, total);
            return;
        }
        
        //Skip the current special offer.
        solve(idx + 1, price, special, needs, bought);
        
        //Try to buy the current special offer.
        if (canBuy(needs, special.get(idx))) {
            List<Integer> newNeeds = buyProduct(needs, special.get(idx));
            solve(idx, price, special, newNeeds, bought + special.get(idx).get(needs.size()));
        }
    }
    
    public boolean isFulfilled(List<Integer> needs) {
        for (int need : needs) {
            if (need != 0) {
                return false;
            }
        }
        return true;
    }
    
    public boolean canBuy(List<Integer> needs, List<Integer> offer) {
        for (int i = 0; i < needs.size(); i++) {
            if (needs.get(i) < offer.get(i)) {
                return false;
            }
        }
        return true;
    }
    
    public List<Integer> buyProduct(List<Integer> needs, List<Integer> offer) {
        List<Integer> newNeeds = new ArrayList<>(needs);
        for (int i = 0; i < needs.size(); i++) {
            newNeeds.set(i, needs.get(i) - offer.get(i));
        }
        return newNeeds;
    }
}

3] Minimum Cost to Convert String I

    #code

class Solution {
    public long minimumCost(String source, String target, char[] original, char[] changed, int[] cost) {
        Map<Character, List<Pair<Character, Integer>>> graph = new HashMap<>();
        int n = original.length;
        for (int i = 0; i < n; i++) {
            char key = original[i];
            List<Pair<Character, Integer>> value = graph.computeIfAbsent(key, k -> new ArrayList<>());
            value.add(new Pair<>(changed[i], cost[i]));
            graph.put(key, value);
        }
        Map<Pair<Character, Character>, Integer> memo = new HashMap<>();
        long res = 0;
        for (int i = 0; i < source.length(); i++) {
            char s = source.charAt(i);
            char t = target.charAt(i);
            if (s != t) {
                int unitCost = dijkstra(s, t, graph, memo);
                if (unitCost == -1) return -1;
                res += unitCost;
            }
        }
        return res;
    }

    private int dijkstra(char s, char t, Map<Character, List<Pair<Character, Integer>>> graph, Map<Pair<Character, Character>, Integer> memo) {
        Pair<Character, Character> pair = new Pair<>(s, t);
        if (memo.containsKey(pair)) return memo.get(pair);
        PriorityQueue<Pair<Character, Integer>> pq = new PriorityQueue<>(Comparator.comparingInt(p -> p.getValue()));
        Map<Character, Integer> dist = new HashMap<>();
        pq.offer(new Pair<>(s, 0));
        dist.put(s, 0);
        while (!pq.isEmpty()) {
            Pair<Character, Integer> top = pq.poll();
            char currentNode = top.getKey();
            int currentCost = top.getValue();
            if (dist.get(currentNode) < currentCost) continue;
            if (currentNode == t) {
                memo.put(pair, currentCost);
                return currentCost;
            }
            if (!graph.containsKey(currentNode)) continue;
            List<Pair<Character, Integer>> nbs = graph.get(currentNode);
            for (Pair<Character, Integer> nb : nbs) {
                char nbNode = nb.getKey();
                int nbCost = nb.getValue();
                if (!dist.containsKey(nbNode) || dist.get(nbNode) > dist.get(currentNode) + nbCost) {
                    dist.put(nbNode, dist.get(currentNode) + nbCost);
                    pq.offer(new Pair<>(nbNode, dist.get(nbNode)));
                }
            }
        }
        memo.put(pair, -1);
        return -1;
    }

}
