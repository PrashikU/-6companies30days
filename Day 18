1] The Skyline Problem
      #code

class BuildingPoint implements Comparable<BuildingPoint>{
    int x;
    boolean isStart;
    int height;
    
    @Override
    public int compareTo(BuildingPoint o){
        if(this.x != o.x) return this.x - o.x;
        else return (this.isStart ? -this.height : this.height) - (o.isStart ? -o.height : o.height);
    }
}

class Solution {
    public List<List<Integer>> getSkyline(int[][] buildings) {
        BuildingPoint[] bP = new BuildingPoint[buildings.length*2];
        int index = 0;
        
        for(int building[] : buildings){
            bP[index] = new BuildingPoint();
            bP[index].x = building[0];
            bP[index].isStart = true;
            bP[index].height = building[2];
            
            bP[index+1] = new BuildingPoint();
            bP[index+1].x = building[1];
            bP[index+1].isStart = false;
            bP[index+1].height = building[2];
            index+=2;
        }
        
        Arrays.sort(bP);
        
        TreeMap<Integer,Integer> queue = new TreeMap<>();
        queue.put(0,1);
        int pMaxHeight = 0;
        List<List<Integer>> ans = new ArrayList<>();
        
        for(BuildingPoint buildingPoint : bP){
            if(buildingPoint.isStart){
                queue.compute(buildingPoint.height,(key,value) -> {
                    if(value!=null){
                        return value+1;
                    }
                    return 1;
                });
            }
            else{
                queue.compute(buildingPoint.height,(key,value) -> {
                    if(value == 1){
                        return null;
                    }
                    return value-1;
                });
            }
            
            int cMaxHeight = queue.lastKey();

            if(pMaxHeight != cMaxHeight){
                List<Integer> list = new ArrayList<>();
                list.add(buildingPoint.x);
                list.add(cMaxHeight);
                pMaxHeight = cMaxHeight;
                ans.add(list);
            }
            
        }
        return ans;
    }
}

2] Minimum Cost of a Path With Special Roads

      #code
class Solution {
    
    class Pair{
        int x;
        int y;
        int cost;
        Pair(int x,int y,int cost){
            this.x=x;
            this.y=y;
            this.cost=cost;
        }
    }
    
    
    public int minimumCost(int[] start, int[] target, int[][] specialRoads) {
        int m=specialRoads.length;
        int n=specialRoads[0].length;
        HashMap<Integer,HashSet<Integer>>map=new HashMap<>();
        
        
        PriorityQueue<Pair>pq=new PriorityQueue<>((a,b)->a.cost-b.cost);;
        
        
        int fx=target[0],fy=target[1];
        int x1=start[0],y1=start[1];
        
        
        pq.add(new Pair(x1,y1,0));
        
        while(pq.size()!=0){

              Pair rem=pq.remove();
            x1=rem.x;
            y1=rem.y;

             if(map.containsKey(x1)&&map.get(x1).contains(y1)){
                        continue;
               }

          
            
            if(map.containsKey(x1)==false){
                map.put(x1,new HashSet<Integer>());
            }
            map.get(x1).add(y1);
            
            
            if(rem.x==fx&&rem.y==fy){
                return rem.cost;
            }
            
            pq.add(new Pair(fx,fy,rem.cost+Math.abs(x1-fx)+Math.abs(y1-fy)));
            
            for(int i=0;i<specialRoads.length;i++){
                
                int x=specialRoads[i][0];
                int y=specialRoads[i][1];
                int x2=specialRoads[i][2];
                int y2=specialRoads[i][3];
                int ct=specialRoads[i][4];
                
               
                    if(map.containsKey(x2)&&map.get(x2).contains(y2)){
                        continue;
                    }
                    pq.add(new Pair(x2,y2,rem.cost+ct+Math.abs(x1-x)+Math.abs(y1-y)));
                    
                
                
            }
            
           
            
            
        }
        
        return -1;
    
    }
}

3] Longest Word in Dictionary through Deleting
            #code

class Solution {
    public String findLongestWord(String s, List<String> dictionary) {
        
        int maxLength = 0;
        String maxWord = "";

        for(String word : dictionary) {
            int length = checkIfWordPresentInString(s, word);

            if(length > maxLength || (length == maxLength && maxWord.compareTo(word) > 0)) {
                maxLength = length;
                maxWord = word;
            }
        }

        return maxWord;
    }

    public int checkIfWordPresentInString(String s, String word) {

        for(int i = 0, j = 0; i <= s.length() - 1; i++) {
            if(s.charAt(i) == word.charAt(j)) {
                j++;

                if(j == word.length()) {
                    return j;
                }
            }
        }
        return 0;
    }
}
