1] Merge k Sorted Lists
    #code
  class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<ListNode> pq = new PriorityQueue<>((o1, o2) -> o1.val - o2.val);
        for (ListNode list: lists) {
            if (list == null) {
                continue;
            }
            pq.add(list);
        }

        ListNode ans = new ListNode(0);
        ListNode dummy = ans;
        while (! pq.isEmpty()) {
            ListNode curr = pq.poll();
            dummy.next = curr;
            if (curr.next != null) {
                pq.add(curr.next);
            }
            dummy = dummy.next;
        }
        return ans.next;
    }
}

2] Maximum Product After K Increments
        #code

  class Solution {
    public int maximumProduct(int[] nums, int k) {
                     
        PriorityQueue<Integer> priorityQueue = new PriorityQueue<>();
        long product = 1;
        int mod = 1000000007;

        for (int x : nums) {
            priorityQueue.offer(x);
        }
		
        while (k-- > 0) {
            int i = priorityQueue.poll();
            priorityQueue.offer(i + 1);
        }

        while (!priorityQueue.isEmpty()) {
            product = product * priorityQueue.poll() % mod;
        }
        return (int) product;
    }
}

3] Russian Doll Envelopes

  #code
  
public class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        if(envelopes.length < 2) return envelopes.length;
        
        Arrays.sort(envelopes, new EnvelopeComparator());
        int[] dp = new int[envelopes.length];
        int size = 0;
        
        for(int[] envelope: envelopes) {
            // binary search
            int left = 0, right = size, middle = 0;     // right = size
            while(left < right) {
                middle = left + (right - left) / 2;
                if(dp[middle] < envelope[1]) left = middle + 1;
                else right = middle;
            }
            
            // left is the right position to 'replace' in dp array
            dp[left] = envelope[1];
            if(left == size) size++;
        }
        return size;
    }
    
    class EnvelopeComparator implements Comparator<int[]> {
        public int compare(int[] e1, int[] e2) {
            return e1[0] == e2[0] ? e2[1] - e1[1] : e1[0] - e2[0];
        }
    }
}
