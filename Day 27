1] Destroying Asteroids
      #code
class Solution {
    public boolean asteroidsDestroyed(int mass, int[] asteroids) {

        Arrays.sort(asteroids);
        long planet = mass;
        for(int i=0;i<asteroids.length;i++){
            if(planet<asteroids[i])
                return false;
            else
                planet = planet + asteroids[i];

        }
        
        return true;
    }
}

2] Integer to English Words
        #code
class Solution {

    private final String[] belowTwenty = {"", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine",
            "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
    private final String[] tens = {"", "", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};

    public String numberToWords(int num) {
        if (num == 0) {
            return "Zero";
        }
        return helper(num);
    }

    private String helper(int num) {
        StringBuilder result = new StringBuilder();
        if (num < 20) {
            result.append(belowTwenty[num]);
        } else if (num < 100) {
            result.append(tens[num / 10]).append(" ").append(belowTwenty[num % 10]);
        } else if (num < 1000) {
            result.append(helper(num / 100)).append(" Hundred ").append(helper(num % 100));
        } else if (num < 1000000) {
            result.append(helper(num / 1000)).append(" Thousand ").append(helper(num % 1000));
        } else if (num < 1000000000) {
            result.append(helper(num / 1000000)).append(" Million ").append(helper(num % 1000000));
        } else {
            result.append(helper(num / 1000000000)).append(" Billion ").append(helper(num % 1000000000));
        }
        return result.toString().trim();
    }
}

3] Stone Game VI

    #code
class Solution {
    public int stoneGameVI(int[] aliceValues, int[] bobValues) {
        int n = aliceValues.length;
        
        int[][] stoneValues = new int[n][3];
        
        for(int i = 0; i < n; i++){
            stoneValues[i] = new int[]{aliceValues[i], bobValues[i],  (aliceValues[i] + bobValues[i])};
        }
        
       
        Arrays.sort(stoneValues, (a, b) -> (b[2] - a[2]));
        
        int aliceScore = 0;
        
        for(int i = 0; i < n; i++){
            
            if(i % 2 == 0){
                
                aliceScore += stoneValues[i][0];
            }else{
                
                aliceScore -= stoneValues[i][1];
            }
        }
        
        if(aliceScore > 0) return 1;
        if(aliceScore < 0) return -1;
        
        return 0;
    }
    
}
