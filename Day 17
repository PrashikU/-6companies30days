1] Constrained Subsequence Sum
          #code

class Solution {
    public int constrainedSubsetSum(int[] nums, int k) {
        
        PriorityQueue<int[]> heap = new PriorityQueue<>((a, b) -> b[0] - a[0]);
        heap.add(new int[] {nums[0], 0});
        int ans = nums[0];

        for (int i = 1; i < nums.length; ++i) {
            
            while (i - heap.peek()[1] > k) {
                heap.remove();
            }

            
            int curr = Math.max(0, heap.peek()[0]) + nums[i];
            ans = Math.max(ans, curr);
            heap.add(new int[] {curr, i});
        }

        return ans;
    }
}


2] Special Permutations

    #code

class Solution {
    int MOD = (int)1e9 + 7;
    int N;
    Integer[][] memo;
    int[] nums;
    public int specialPerm(int[] nums) {
        this.N = nums.length;
        this.memo = new Integer[N][1 << N];
        this.nums = nums;
        return backtrack(0, 0);
    }
    
    private int backtrack(int preIndex, int mask) {
        if (mask == (1 << N) - 1) return 1;
        if (memo[preIndex][mask] != null) return memo[preIndex][mask];
        int count = 0;
        for (int i = 0; i < N; i++)
            if ((mask & (1 << i)) == 0 && 
                (mask == 0 || nums[i] % nums[preIndex] == 0 || nums[preIndex] % nums[i] == 0))
                count = (count + backtrack(i, mask | (1 << i))) % MOD; //used.add(i);
        return memo[preIndex][mask] = count;
    }
} 

3]  Matrix Cells in Distance Order

        #code

class Solution {
    public int[][] allCellsDistOrder(int R, int C, int r0, int c0) {
        int[][] result = new int[R * C][];
        result[0] = new int[] {r0, c0};            
        int resultIdx = 1;
        int lim = Math.max( r0, R-r0-1 ) + Math.max( c0, C-c0-1 );
		                                           
        for (int dist = 1; dist <= lim; dist++) {  
            int r = r0 - dist;
            int c = c0;
           
            for (int count = dist; count > 0; count--) {    
                if (r >= 0 && c >= 0)  result[resultIdx++] = new int[] {r, c};
                r++;
                c--;
            }
          
            for (int count = dist; count > 0; count--) {
                if (r < R && c >= 0)  result[resultIdx++] = new int[] {r, c};
                r++;
                c++;
            }
            
            // Diamond side: Bottom Right
            for (int count = dist; count > 0; count--) {
                if (r < R && c < C)  result[resultIdx++] = new int[] {r, c};
                r--;
                c++;
            }
           
            for (int count = dist; count > 0; count--) {
                if (r >= 0 && c < C)  result[resultIdx++] = new int[] {r, c};
                r--;
                c--;
            }
        }
        return result;
    }
}
