1] Find in Mountain Array
    #code
/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 *     public int get(int index) {}
 *     public int length() {}
 * }
 */
 
class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr) {
        int l = 0 , r = mountainArr.length() - 1;
        while(l < r) {
            int mid = (l + r) >> 1;
            if(mountainArr.get(mid) > mountainArr.get(mid + 1)) {
                r = mid - 1;
            }
            else {
                l = mid + 1;
            }
        }
        
        int l1 = 0 , r1 = l;
        while(l1 <= r1) {
            int mid = (l1 + r1) >> 1;
            if(mountainArr.get(mid) == target) {
                return mid;
            }
            if(mountainArr.get(mid) > target) {
                r1 = mid - 1;
            }
            else {
                l1 = mid + 1;
            }
        }
        l1 = l;
        r1 = mountainArr.length() - 1;
        while(l1 <= r1) {
            int mid = (l1 + r1) >> 1;
            if(mountainArr.get(mid) == target) {
                return mid;
            }
            if(mountainArr.get(mid) > target) {
                l1 = mid + 1;
            }
            else {
                r1 = mid - 1;
            }
        }
        return -1;
    }
}

2] Design Add and Search Words Data Structure

      #code
class WordDictionary {
    Map<Integer, List<String>> map = new HashMap<>();
public void addWord(String word) {
    int index = word.length();
	if (!map.containsKey(index)) {
	    List<String> list = new ArrayList<>();
	    list.add(word);
		map.put(index, list);
	} else {
		map.get(index).add(word);
	}
}


public boolean search(String word) {
  int index = word.length();
  if (!map.containsKey(index)) {
      return false;
  }
  
  List<String> list = map.get(index);
  for(String s : list) { 
      if(isSame(s, word)) { // when word has '.'
          return true;
      }
  }
  return false;
}

public boolean isSame(String s, String word) { // word has '.'
    for (int i = 0; i < s.length(); i++) {
        if (word.charAt(i) != '.' && s.charAt(i) != word.charAt(i)) {
            return false;
        }
    }
    return true;
}
}

3] Number of Good Leaf Nodes Pairs
class Solution { 
    static int cnt; 
    
    public static ArrayList<Integer> call(TreeNode root,int dist){ 
    
        if(root==null){return null;}
        
        if(root.right==null && root.left==null){ 
        ArrayList<Integer> a= new ArrayList<>();
        a.add(1);
        return a;
        }
        
        
        ArrayList<Integer> a1=call(root.left,dist);
        ArrayList<Integer> a2=call(root.right,dist);
        
        if(a1==null){ 
          
            for(int i=0;i<a2.size();i++){ 
             a2.set(i,a2.get(i)+1);
            }
            return a2;
            
        }
        
        else if(a2==null){ 
         for(int i=0;i<a1.size();i++){ 
           a1.set(i,a1.get(i)+1);
            }
            return a1;
            
        }
        
        else{ 
            for(int i=0;i<a1.size();i++){ 
              
                for(int j=0;j<a2.size();j++){ 
                
                    if(a1.get(i)+a2.get(j)<=dist){cnt++;}
                    
                }
            
            }
            
        
        }
        
        for(int i=0;i<a1.size();i++){ 
         a1.set(i,a1.get(i)+1);
        }
         for(int i=0;i<a2.size();i++){ 
         a2.set(i,a2.get(i)+1);
        }
        
        
        a1.addAll(a2);
        return a1;
        
        
        
        
    }
    
    
    
    public int countPairs(TreeNode root, int dist) {
        cnt=0;
        
        call(root,dist);
        
        
        return cnt;
        
        
    }
}
