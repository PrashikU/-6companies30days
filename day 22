1] Assign Cookies

    #code
class Solution {
    public int findContentChildren(int[] g, int[] s) {
        int cookies_numbers = s.length;
        if(cookies_numbers == 0)  return 0;
        Arrays.sort(g);
        Arrays.sort(s);

        int maximum_number_count = 0;
        int cookieIndex = cookies_numbers - 1;
        int childIndex = g.length - 1;
        while(cookieIndex >= 0 && childIndex >=0){
            if(s[cookieIndex] >= g[childIndex]){
                maximum_number_count++;
                cookieIndex--;
                childIndex--;
            }
            else{
                childIndex--;
            }
        }

        return maximum_number_count;
    }
}

2] Throne Inheritance

    #code
class ThroneInheritance {
    
    HashMap<String,FamTree> map;
    FamTree throne;
    public ThroneInheritance(String kingName) {
        //intitalize the hashmap
        map = new HashMap<>();
        FamTree king = new FamTree(kingName);
        map.put(kingName,king);
        throne = king;
    }
    
    public void birth(String parentName, String childName) {
        FamTree child = new FamTree(childName);
        map.put(childName,child);
        map.get(parentName).childs.add(child);
      //  System.out.println(map.get(parentName).childs.size());
    }
    
    public void death(String name) {
        map.get(name).isDead = true;
    }
    
    public List<String> getInheritanceOrder() {
        //pre order traversal
        return  doPreorderTraversal(new ArrayList<>(),throne);
    }
    
    private List<String> doPreorderTraversal(List<String> list,FamTree curr){
        
        if(!curr.isDead){
           list.add(curr.name);    
        }
        
        if(curr.childs.isEmpty()){
            return list;
        }
        
        for(FamTree chThrone : curr.childs){
            doPreorderTraversal(list,chThrone);
        }
        
        return list;
    }
}

class FamTree{
    
    String name;
    List<FamTree> childs;
    boolean isDead;
    
    public FamTree(String name){
        this.isDead = false;
        this.childs = new ArrayList<>();
        this.name = name;
    }
}


3] Kth Largest Element in a Stream

    #code
class KthLargest {
    private int k;
    private Queue<Integer> heap = new PriorityQueue<>();

    public KthLargest(int k, int[] nums) {
        this.k = k;
        for (int num : nums) add(num);
    }
    
    public int add(int val) {
        if ( heap.size() < k || val > heap.peek() ) heap.add(val);
        if (heap.size() > k) heap.remove();

        return heap.peek();
    }
}
