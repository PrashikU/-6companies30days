1]  Count Words Obtained After Adding a Letter
                #code
  
// Approach 2: Sort words
class Solution {
    public int wordCount(String[] startWords, String[] targetWords) {

        Set<String> set = new HashSet<>();
        for (String word : startWords) {
            char[] chars = word.toCharArray();
            Arrays.sort(chars);
            set.add(new String(chars));
        }

        int count = 0;
        for (String word : targetWords) {
            char[] chars = word.toCharArray();
            Arrays.sort(chars);
            String sorted = new String(chars);
            for (int i = 0; i < sorted.length(); i++) {
                String transformed = sorted.substring(0, i) + sorted.substring(i + 1, sorted.length());
                if (set.contains(transformed)) {
                    count++;
                    break;
                }
            }
        }
        return count;
    }
}

2] Find the City With the Smallest Number of Neighbors at a Threshold Distance
          #code
class Solution {

     class Pair{
        int node;
        int dis;
        Pair(int node, int dis){
            this.node = node;
            this.dis = dis;
        }
    }
    public int findTheCity(int n, int[][] edges, int distanceThreshold) {
           List<List<Pair>> adjList = new ArrayList<>(); 
        for(int i = 0; i<n; i++)
        adjList.add(new ArrayList<>());
        
        for(int[] edge: edges){
            
            adjList.get(edge[0]).add(new Pair(edge[1], edge[2]));
            adjList.get(edge[1]).add(new Pair(edge[0], edge[2]));
        }

        PriorityQueue<Pair> pq = new PriorityQueue<>((x,y) -> x.dis - y.dis); 
        int city = 0;
        int cntmax = n;
       
        for(int i = 0; i<n; i++)
        {
            
            int[] dist = new int[n];
            Arrays.fill(dist, Integer.MAX_VALUE);
            pq.add(new Pair(i, 0));
            dist[i] = 0;
            
            
            while(!pq.isEmpty())
            {
                Pair curnode = pq.poll();
                int getval = curnode.node;
                int getdis = curnode.dis;
                for(Pair neighbour: adjList.get(getval))
                {
                    int newdis = getdis + neighbour.dis;
                    if(newdis <= distanceThreshold && newdis < dist[neighbour.node])
                    {
                        pq.add(new Pair(neighbour.node, newdis));
                        dist[neighbour.node] = newdis;
                    }
                }
            }
            
        
            
            int cnt = 0;
            for(int j = 0; j<n; j++)
            {
                if(dist[j] != Integer.MAX_VALUE)
                {
                    cnt++;
                }
            }
            if(cnt <= cntmax)
            {
                city = Math.max(city,i);
                cntmax = cnt;
            }
        }  

        return city;
    }
}

3] Minimum Non-Zero Product of the Array Elements
        #code
class Solution {
    public int mod = 1_000_000_007;
    public int minNonZeroProduct(int p) {
        if (p == 1) return 1;
        
        long mx = (long)(Math.pow(2, p)) - 1;
        long sm = mx - 1;
        long n = sm/2;
        long sum = rec(sm, n);
        
        return (int)(sum * (mx % mod) % mod); 
    }
    
    public long rec(long val, long n) {
        if (n == 0) return 1;
        if (n == 1) return (val % mod);
        
        long newVal = ((val % mod) * (val % mod)) % mod;
        
        if (n % 2 != 0) {
            return ((rec(newVal, n/2) % mod) * (val % mod)) % mod;
        }
        
        return rec(newVal, n/2) % mod;
    }
}
