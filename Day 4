1] K Divisible Elements Subarrays
        #code

class Solution {
	public int countDistinct(int[] nums, int k, int p) {
		HashSet<String> hs = new HashSet<>();

		for(int i=0; i<nums.length; ++i) {
			int cnt = 0;
			StringBuilder sb = new StringBuilder();

			for(int j=i; j<nums.length; ++j) {

				if(nums[j]%p == 0) {
					cnt++;
				}

				if(cnt > k) {
					break;
				}

				sb.append(nums[j] + ",");

				hs.add(sb.toString());
			}
		}

		return hs.size();
	}

}

2] Map of Highest Peak

   #code
class Solution {
    public int[][] highestPeak(int[][] isWater) {
        int rows = isWater.length;
        int cols = isWater[0].length;
        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        int[][] resultMatrix = new int[rows][cols];
        Queue<int[]> queue = new LinkedList<>();

        for (int i = 0; i < rows; i++) {
            Arrays.fill(resultMatrix[i], -1);
            for (int j = 0; j < cols; j++) {
                if (isWater[i][j] == 1) {
                    resultMatrix[i][j] = 0;
                    queue.add(new int[]{i, j});
                }
            }
        }

        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            for (int[] dir : directions) {
                int x = current[0] + dir[0];
                int y = current[1] + dir[1];
                if (x < 0 || y < 0 || x >= rows || y >= cols || resultMatrix[x][y] != -1) continue;
                resultMatrix[x][y] = resultMatrix[current[0]][current[1]] + 1;
                queue.add(new int[]{x, y});
            }
        }

        return resultMatrix;
    }
}

3]  Maximum Sum BST in Binary Tree

       #code

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class NodeValue {
    // maxValue, minValue for checking validation of BST and maxsum of that valid BST.
    public int maxValue, minValue, maxSum;

    NodeValue(int max, int min, int maxSum) {
        this.maxValue = max;
        this.minValue = min;
        this.maxSum = maxSum;
    }
}

class Solution {
    int max = 0;

    public NodeValue maxSumBSTHelper(TreeNode root) {
        // An empty tree or BST of size 0;
        if (root == null) {
            return new NodeValue(Integer.MIN_VALUE, Integer.MAX_VALUE, 0);
        }
        // Get values from left and right subtree
        NodeValue left = maxSumBSTHelper(root.left);
        NodeValue right = maxSumBSTHelper(root.right);

        // Check if it's a valid BST
        if (left.maxValue < root.val && root.val < right.minValue) {
            // It is a BST, calculate maxsum till now.
            max = Math.max(max, root.val + left.maxSum + right.maxSum);
            return new NodeValue(Math.max(root.val, right.maxValue), Math.min(root.val, left.minValue),
                    root.val + left.maxSum + right.maxSum);

        }
        // Otherwise return [INF, -INF] so that the parent can't be a BST.
        return new NodeValue(Integer.MAX_VALUE, Integer.MIN_VALUE, Math.max(left.maxSum, right.maxSum));
    }

    public int maxSumBST(TreeNode root) {
        maxSumBSTHelper(root);
        return max;
    }
}
